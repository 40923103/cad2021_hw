var tipuesearch = {"pages": [{'title': 'About', 'text': '本學期的電腦輔助設計實習, 要求每一位學員根據本 HW template 的格式建立個人的作業倉儲與網頁. \n \n 你的學號 40923103 \n 網站倉儲:  https://github.com/40923103/cad2021_hw \n 網站連結:\xa0 https://40923103.github.io/cad2021_hw/content/index.html \n 其他與作者或作業相關資料說明或介紹 \n', 'tags': '', 'url': 'About.html'}, {'title': 'HW1', 'text': 'HW1 佔學期成績 25% \n HW1 必須在 2021.11.10 22:00 之前完成. \n HW1 具體項目成果回報區 將於 2021.09.23 開啟, 於  2021.11.10 22:00 關閉. \n 作業一: meArm Robot 零件繪圖與機電運動模擬場景製作 \n Step1 : 下載  meARM.7z  這個包含尚未完成組立的 meArm Robot 場景與雷射切割零件組立手冊. \n meArm_75-0040_v1.pdf  則是另外一本組立參考手冊. \n Step2 : 從課程網頁中的  Compile CoppeliaSim 頁面 , 下載  coppeliaSim 4.1.0 官方版與 MSYS2 編譯版.7z  (檔案大小 412 MB, 解開壓縮後 1GB) 可攜套件. \n Step3 : 在 HW1 中, 要求每一位學員透過程式亂數分配 (兩班實際亂數分配結果以上課時點擊下列按鈕所得結果為準) 所使用的兩套參數式 CAD 套件, 從軟體發展緣起開始進行介紹,\xa0 經過教育版軟體套件檔案的取得, 下載安裝以及配置使用. 根據 Step1 中的零件尺寸, 逐一完成 meArm Robot 各零件繪製與組立. 並將零件 匯入  CoppeliaSim 進行組裝配置後, 以  UI 介面 中的 slider 控制 meArm Robot 各軸的旋轉作動. \n 2b CAD 套件分配結果:  https://mde.tw/cad2021/downloads/online/2b_hw1_cad.txt \n 附件: \n 1. CAD 套件分配表: \n sw: Solidworks, inv: Inventor, nx: NX12, ons: Onshape, slvs: Solvespace \n 2a 套件亂數分配結果 \n 2b 套件亂數分配結果 \n 2. 在兩套 CAD 完成零件繪圖並轉入 CoppeliaSim 後, 為了建立 Dynamic Model 必須利用  shape edit modes  轉為  clean model , 並與實際轉入的 STL 格式零件外形結合應用後建立模擬場景 (scenes). \n 3. meARM Robot  動態模擬場景 的建構, 可參考  0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ,  7 , 也可參考  Uarm Robot model  與相關 影片 . \n 4. CoppeliaSim design dynamic simulations  說明頁面 . \n 5.  網際 Lua  程式執行. \n 6.  meArm.slvs ,  meArm_in_solvespace.slvs \n 7. UI 介面程式參考: \n function closeEventHandler(h)\n    sim.addLog(sim.verbosity_scriptinfos,\'Window \'..h..\' is closing...\')\n    simUI.hide(h)\nend\n\nfunction joint1_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta1 set to \'..newVal)\n    sim.setJointTargetPosition(joint1, newVal*deg)\nend\n\nfunction joint2_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta2 set to \'..newVal)\n    sim.setJointTargetPosition(joint2, newVal*deg)\nend\n\nfunction joint3_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta3 set to \'..newVal)\n    sim.setJointTargetPosition(joint3, newVal*deg)\nend\n\nfunction joint16_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta16 set to \'..newVal)\n    sim.setJointTargetPosition(joint16, newVal*deg)\n    sim.setJointTargetPosition(joint20, -newVal*deg)\nend\n\nfunction sysCall_init()\n    -- do some initialization here\n    joint1 = sim.getObjectHandle(\'motor1\')\n    joint2 = sim.getObjectHandle(\'motor2\')\n    joint3 = sim.getObjectHandle(\'motor3\')\n    joint16 = sim.getObjectHandle(\'motor16\')\n    joint20 = sim.getObjectHandle(\'motor20\')\n    i = 0\n    deg = math.pi/180\n    print(i)\n    xml = [[\n<ui closeable="true" on-close="closeEventHandler" resizable="true">\n    <label text="This is a demo of the CustomUI plugin. Browse through the tabs below to explore all the widgets that can be created with the plugin." wordwrap="true" />\n    <tabs>\n        <tab title="Numeric">a\n            <label text="Sliders can be oriented horizontally or vertically, and have optional properties that can be set (in the XML) such as minimum and maximum value." wordwrap="true" />\n            <label text="" id="3000" wordwrap="true" />\n            <label text="theta1" /> <hslider tick-position="above" tick-interval="1" \n            minimum="0" maximum="360" on-change="joint1_rotate" />\n            <label text="theta2" /> <hslider tick-position="above" tick-interval="1" \n            minimum="-90" maximum="65" on-change="joint2_rotate" />\n            <label text="theta3" /> <hslider tick-position="above" tick-interval="1" \n            minimum="-90" maximum="185" on-change="joint3_rotate" />\n            <label text="theta16" /> <hslider tick-position="above" tick-interval="1" \n            minimum="0" maximum="15" on-change="joint16_rotate" />\n        </tab>\n    </tabs>\n</ui>\n]]\n    ui=simUI.create(xml)\n    \nend \n \n (From:  2016_ADDITIVE MANUFACTURING PROCESSES FOR FABRICATING A MINI ROBOT - COMPUTATIONAL MODELS AND EXPERIMENTAL RESULTS.pdf ) \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'ONshape', 'text': '透過程式亂數分配，我分配到的兩個程式為ONshape和NX \n 此將介紹如何使用ONshape，這個軟體較為方便，直接在網站上申請帳號即可畫圖 \n ONshape程式剛開始用時會發現介面設定都跟solidworks相似，2D及3D也連結的很方便，在長料這塊不會有太大限制，所以使用起來還蠻順的。 \n \n Wink操作影片 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'ONshape.html'}, {'title': 'ONshape 安裝配置', 'text': 'Onshape: \n \n 至  https://www.onshape.com/en/  申請帳號後使用. \n \n 申請完後，登入 \n 影片連結: https://youtu.be/2o3x78vTTZo \n', 'tags': '', 'url': 'ONshape 安裝配置.html'}, {'title': 'ONshape 操作流程', 'text': '\n 點選 建立 \n \n 點選 文件 \n \n 點選 草圖 \n \n 選橘色那塊平面 \n \n 在剛橘色那塊平面上按右鍵，點選 正視於草圖平面 \n 之後就可以操作畫圖 \n \n \n', 'tags': '', 'url': 'ONshape 操作流程.html'}, {'title': 'ONshape 運動場景', 'text': 'https://youtu.be/Y57HHs584tY \n', 'tags': '', 'url': 'ONshape 運動場景.html'}, {'title': 'NX12', 'text': '西門子PLM軟體 （Siemens PLM Software）是 產品生命周期管理 （PLM）軟體領域全球領先的供應商之 \n 在操作的過程中，許多功能和solidworks相似，但除了2D和3D使用的結合外也可以用來模擬CNC銑床加工過程和 \n \n', 'tags': '', 'url': 'NX12.html'}, {'title': 'NX12 安裝配置', 'text': 'NX12 套件下載安裝與配置 \n \n 先到kmol網站 \n 點選 實習內容 \n \xa0 \xa0 \xa0 stage1 \n \xa0 \xa0 \xa0 HW1_template \n 下載NX12 \xa0 可攜 版本下載 \n \n 點選 下載 \n \n 仍要下載後 壓縮至隨身碟裡 \n 壓玩完後就完成 \n 影片連結: https://youtu.be/2o3x78vTTZo \n \n', 'tags': '', 'url': 'NX12 安裝配置.html'}, {'title': 'NX12 操作流程', 'text': '影片連結: https://youtu.be/25vbgdB25xU \n NX12 運動場景 https://youtu.be/25vbgdB25xU \n', 'tags': '', 'url': 'NX12 操作流程.html'}, {'title': 'W13', 'text': '1.零件繪圖進度目前畫了20個，最頭疼的為齒輪零件組之後會使用SOLIDWORKS繪出 \n wink影片連結 \n \n \n \n \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'HW1-1', 'text': 'HW1-1 佔學期成績 15% \n HW1-1 必須在 2021.12.01 22:00 之前完成. \n HW1-1 具體項目成果回報區 將於 2021.11.18 開啟, 於  2021.12.01 22:00 關閉. \n 作業 1-1: Mirobot 機械手臂場景組合 \n 說明: meArm Robot 有四個自由度, 請根據 HW1 的零組件繪製組立與 CoppeliaSim 運動場景模擬, 延伸至  Task1-1  中六個自由度的 Mirobot 機械手臂. \n mirobot_part1_to_part5.7z  為取自 \xa0 https://github.com/wlkata/Mirobot-STL  的參考零件. 請利用場景中 Mirobot STL 零件, 組合為可以透過  UI 介面 中的 slider 控制各軸作動旋轉的運動模型. \n 請根據  Task1-1  中的說明, 完成各項指定任務. \n', 'tags': '', 'url': 'HW1-1.html'}, {'title': 'HW2', 'text': 'HW2 佔學期成績 20% \n HW2 必須在 2021.12.22 22:00 之前完成. \n HW2 具體項目成果回報區 將於 2021.12.09 開啟, 於  2021.12.22 22:00 關閉. \n meArm 逆向運動學與網際參數式 CAD API 結合應用. \n 請將  https://github.com/mdecourse/meArm  中的 meArm Robot 逆向運動學程式, 改為 Lua 與 Python 程式, 使能套用至 HW1 所完成的 CoppeliaSim meArm 運動模擬場景. 並分別採 Lua, Legacy remote API 及 Bluezero remote API 逆向運動的方式進行控制. \n 請利用  Task2  中的 Solidworks, Inventor 與 NX API 程式控制 meArm Robot 零組件尺寸, 說明並討論如何透過網際程式控制 meArm Robot 的零件尺寸, 並結合上述逆向運動學程式庫, 使得自動化機電產品開發流程更容易滿足客製化需求. \n 參考: \n 2016_ADDITIVE MANUFACTURING PROCESSES FOR FABRICATING A MINI ROBOT - COMPUTATIONAL MODELS AND EXPERIMENTAL RESULTS.pdf \n Robot Manipulator Control with Inverse Kinematics PD-Pseudoinverse Jacobian and Forward Kinematics Denavit Hartenber.pdf \n KINEMATIC ANALYSIS FOR ROBOT ARM.pdf \n https://codebender.cc/user/MeArm \n https://github.com/mdecourse/meArmPi \n /downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf \n https://github.com/mdecourse/me-arm-ik \n https://github.com/mdecourse/mearm_model \n https://courses.ece.cornell.edu/ece5990/ECE5725_Fall2016_Projects/pas324_ml634/index.html \n https://github.com/mdecourse/InefficientSkittleSorter \n https://mearm.com \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 為選項作業. \n HW3 具體項目成果回報區 將於 2021.12.09 開啟, 於  2022.01.05 22:00 關閉 \n https://mde.tw/cad2021/content/Task3.html \xa0 \n https://mde.tw/cad2021/content/Task4.html \n https://mde.tw/cad2021/content/Task5.html \n https://mde.tw/cad2021/content/Task6.html \n https://mde.tw/cad2021/content/Task7.html \n 請從上列 Tasks 中自行選擇項目內容完成 HW3. \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Final Project', 'text': 'Final Project 佔學期成績 40% \n 2a 與 2b 必須在 2022.01.06 上課之前完成 Final Project \n Final Project 具體項目成果回報區 將於 2021.12.09 開啟, 於  2022.01.05 22:00 關閉 \n 彈性製造系統場景設計與製作 \n 請從  https://github.com/mdecourse/scenes  與  https://github.com/mdecourse/models  中選擇場景或模型, 配合  cad2021_textbook.pdf  (登入 @gm 帳號後下載) 教材中的內容, 自選製作與組立產品, 組合成一個 Flexible Manufacturing System 系統場景. \n 彈性製造系統內容說明 \n 範例: \n \n \n', 'tags': '', 'url': 'Final Project.html'}, {'title': 'run', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'run.html'}, {'title': 'W11', 'text': '\n', 'tags': '', 'url': 'W11.html'}, {'title': '筆記', 'text': '將記錄每個禮拜之進度以及過程中遇到的困難，紀錄解決辦法。 \n', 'tags': '', 'url': '筆記.html'}, {'title': '學校電腦連接網路', 'text': '圖為無法連線的樣子 \n 先檢查網路線是否連接成功 \n 步驟1- \n 點選右上角的冒號圖示 \n 2-點選setting \n 3-點選internet 查看連接阜號\xa0 \n 4-查看虛擬網路線是否有開啟 \n \n', 'tags': '', 'url': '學校電腦連接網路.html'}, {'title': '9444', 'text': '\n 打開隨身碟的cad2021 選擇 ipv4.bat \n \n 輸入 cd tmp \n cad2021_hw \n cms \n 複製白底的網址，開啟後即可做動 \n', 'tags': '', 'url': '9444.html'}, {'title': 'Tokens過期問題', 'text': '在小黑窗輸入acp推送資料時出現 \n \n 需要我輸入 github的密碼 \n 也提示我 takens 出現過期的警告 \n \n 先進入github的頁面，點選 setting \n \n 左邊行列的 Developer settings \n \n personal access tokens \n \n generate new token \n \n 輸入 密碼 \n \n note輸入 cad2021\xa0\xa0 日期改藍色的那個選項 \n \n \n 全選項都 打勾 後按 綠色按鍵 \n 按下後，出現一串字碼，將複製下 \n config ipv4 的內容 \n \n 畫紅色的字串以剛複製下的字碼取代之 \n 按 save \n 完成', 'tags': '', 'url': 'Tokens過期問題.html'}, {'title': 'wink', 'text': '\n 在頁面上搜尋 debugmode wink \n \n 點選 下載 \n \n 點選 agree \n 下載位置選取 桌面 \n \n \n 開啟wink資料夾 找到 Wink.exe \n \n 開啟後即可錄製影片 \n \n 擷取完的畫面如圖 \n', 'tags': '', 'url': 'wink.html'}, {'title': 'mearm模擬', 'text': '先去gitter這裡下載檔案 \n \n 這是範例，利用這個去模擬機械手臂的運作，自行加上螺絲之類的零件', 'tags': '', 'url': 'mearm模擬.html'}]};